= simple_form_for @dataset do |f|
  = f.input :title,
    error: 'Please enter a title',
    input_html: { class: 'required' },
    required: true,
    inline_label: true

  = f.input :description,
    placeholder: 'e.g. Some useful notes about the data',
    inline_label: true

  = f.input :grants_and_funding,
    placeholder: 'Grants and funding information',
    inline_label: true

  .field_note.text-right
    If a user does not appear in the list
    %a{ href: new_user_url }
      go here to add users by NetID

  = f.association :maintainer,
    label_method: :name,
    collection: User.all.order(:last_name),
    prompt: 'Choose a Maintainer',
    input_html: { class: 'required' },
    required: true

  = f.association :author,
    label_method: :name,
    collection: User.all.order(:last_name),
    prompt: 'Choose an Author',
    input_html: { class: 'required' },
    required: true

  = f.fields_for :dataset_organizations do |df|
    .input.select.required.dataset_organizations_departments
      = df.label :departments, 'Departments', { class: 'select required' }
      = df.select :departments,
        options_for_select(Organization.department.order(:name).pluck(:name, :id),
          @dataset.orgs(:department).pluck(:id)),
        {}, { multiple: true, class: 'select2-orgs select2 required', required: 'required' }

    .input.select.optional.dataset_organizations_research_cores
      = df.label :research_cores, 'Research Cores'
      = df.select :research_cores,
        options_for_select(Organization.research_core.order(:name).pluck(:name, :id),
          @dataset.orgs(:research_core).pluck(:id)),
        {}, { multiple: true, class: 'select2-orgs select2' }

    .input.select.optional.dataset_organizations_institutes_and_centers
      = df.label :institutes_and_centers, 'Institutes and Centers'
      = df.select :institutes_and_centers,
        institutes_and_centers_select_options,
        {}, { multiple: true, class: 'select2-orgs select2' }

  = f.association :characteristic,
    collection: Characteristic.all.order(:name),
    prompt: 'Choose a Resource Type',
    label: 'Resource Types'

  .input.select.optional.dataset_categories
    = f.label :categories, 'MeSH Categories'
    = f.select :categories,
      options_for_select(@dataset.categories.reject(&:blank?).map {|o| [o,o] },
        @dataset.categories.reject(&:blank?)),
      {}, { multiple: true, class: 'select2' }

  .input.select.optional.dataset_fast_categories
    = f.label :fast_categories, 'FAST Categories'
    = f.select :fast_categories,
      options_for_select(@dataset.fast_categories.reject(&:blank?).map {|o| [o,o] },
        @dataset.fast_categories.reject(&:blank?)),
      {}, { multiple: true, class: 'select2' }
  
  = f.input :visibility,
    collection: Dataset::VISIBILITY_OPTIONS,
    selected: (@dataset.visibility || Dataset::PUBLIC)

  = f.input :state,
    collection: Dataset::STATE_OPTIONS,
    selected: (@dataset.state || Dataset::ACTIVE)

  = f.input :source, placeholder: 'http://example.edu/dataset.json'

  .field_note.text-right
    For more about licenses go to 
    %a{ href: 'http://licenses.opendefinition.org/', target: '_blank' }
      http://licenses.opendefinition.org/
  = f.input :license, collection: @licenses, prompt: 'Choose a License'

  = f.input :version, placeholder: '1.0'

  = f.button :submit

:javascript
  function mark_term(term, prefix) {
    var marked = term.slice(0, prefix.length);
    var not_marked = term.slice(prefix.length);
    return '<mark>' + marked + '</mark>' + not_marked;
  }

  function fast_template(state) {
    if (state.prefix === undefined) return;

    return $('<span>' + mark_term(state.text, state.prefix) + '</span>');
  }

  function mesh_template(state) {
    if (state.prefix === undefined) return;

    var text = state.text;
    var matcher = '';
    if (state.text.match(new RegExp("^" + state.prefix, 'i'))) {
      text = mark_term(state.text, state.prefix);
    } else {
      matcher = ' <span>(' + mark_term(state.matched, state.prefix) + ')</span>';
    }
    return $(
      '<span>' + text + '</span>' + matcher +
      '<br /><blockquote>' + state.description + '</blockquote>'
    );
  }

  function process_fast(obj) {
    return {
      text: obj.text,
      id: obj.text,
      prefix: obj.prefix
    }
  }

  function process_mesh(obj) {
    return {
      text: obj.text,
      id: obj.text,
      description: obj.description,
      matchers: obj.matchers,
      mesh_id: obj.mesh_id,
      matched: obj.matched,
      prefix: obj.prefix
    }
  }

  function select_2_ajax(suggest_url, process_data_func) {
    return {
      url: suggest_url,
      data: function (params) {
        var query = {
          query: params.term
        }

        return query;
      },
      processResults: function (data) {
        return {
          //FIXME We should link subjects to the actual table by id
          results: data.map(function(obj) { return process_data_func(obj); })
        }
      }
    }
  }

  $('.select2-orgs').select2({
    theme: "foundation",
  });

  $('#dataset_categories').select2({
    theme: "foundation",
    minimumInputLength: 1,
    ajax: select_2_ajax('/categories/suggestions', process_mesh),
    templateResult: mesh_template
  });

  $('#dataset_fast_categories').select2({
    theme: "foundation",
    minimumInputLength: 1,
    ajax: select_2_ajax('/fast_subjects/suggestions', process_fast),
    templateResult: fast_template
  });
